/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package micronaut.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Natural person is always private customer */
@org.apache.avro.specific.AvroGenerated
public class NaturalPerson extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7700242349873616072L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NaturalPerson\",\"namespace\":\"micronaut.kafka.avro.model\",\"doc\":\"Natural person is always private customer\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"doc\":\"type of person i.e. NaturalPerson or JuristicPerson\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"secondName\",\"type\":\"string\"},{\"name\":\"birthday\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NaturalPerson> ENCODER =
      new BinaryMessageEncoder<NaturalPerson>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NaturalPerson> DECODER =
      new BinaryMessageDecoder<NaturalPerson>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NaturalPerson> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NaturalPerson> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NaturalPerson> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NaturalPerson>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NaturalPerson to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NaturalPerson from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NaturalPerson instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NaturalPerson fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** type of person i.e. NaturalPerson or JuristicPerson */
   private java.lang.CharSequence type;
   private java.lang.CharSequence firstName;
   private java.lang.CharSequence secondName;
   private java.lang.CharSequence birthday;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NaturalPerson() {}

  /**
   * All-args constructor.
   * @param type type of person i.e. NaturalPerson or JuristicPerson
   * @param firstName The new value for firstName
   * @param secondName The new value for secondName
   * @param birthday The new value for birthday
   */
  public NaturalPerson(java.lang.CharSequence type, java.lang.CharSequence firstName, java.lang.CharSequence secondName, java.lang.CharSequence birthday) {
    this.type = type;
    this.firstName = firstName;
    this.secondName = secondName;
    this.birthday = birthday;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return firstName;
    case 2: return secondName;
    case 3: return birthday;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: firstName = (java.lang.CharSequence)value$; break;
    case 2: secondName = (java.lang.CharSequence)value$; break;
    case 3: birthday = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return type of person i.e. NaturalPerson or JuristicPerson
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * type of person i.e. NaturalPerson or JuristicPerson
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'secondName' field.
   * @return The value of the 'secondName' field.
   */
  public java.lang.CharSequence getSecondName() {
    return secondName;
  }


  /**
   * Sets the value of the 'secondName' field.
   * @param value the value to set.
   */
  public void setSecondName(java.lang.CharSequence value) {
    this.secondName = value;
  }

  /**
   * Gets the value of the 'birthday' field.
   * @return The value of the 'birthday' field.
   */
  public java.lang.CharSequence getBirthday() {
    return birthday;
  }


  /**
   * Sets the value of the 'birthday' field.
   * @param value the value to set.
   */
  public void setBirthday(java.lang.CharSequence value) {
    this.birthday = value;
  }

  /**
   * Creates a new NaturalPerson RecordBuilder.
   * @return A new NaturalPerson RecordBuilder
   */
  public static micronaut.kafka.avro.model.NaturalPerson.Builder newBuilder() {
    return new micronaut.kafka.avro.model.NaturalPerson.Builder();
  }

  /**
   * Creates a new NaturalPerson RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NaturalPerson RecordBuilder
   */
  public static micronaut.kafka.avro.model.NaturalPerson.Builder newBuilder(micronaut.kafka.avro.model.NaturalPerson.Builder other) {
    if (other == null) {
      return new micronaut.kafka.avro.model.NaturalPerson.Builder();
    } else {
      return new micronaut.kafka.avro.model.NaturalPerson.Builder(other);
    }
  }

  /**
   * Creates a new NaturalPerson RecordBuilder by copying an existing NaturalPerson instance.
   * @param other The existing instance to copy.
   * @return A new NaturalPerson RecordBuilder
   */
  public static micronaut.kafka.avro.model.NaturalPerson.Builder newBuilder(micronaut.kafka.avro.model.NaturalPerson other) {
    if (other == null) {
      return new micronaut.kafka.avro.model.NaturalPerson.Builder();
    } else {
      return new micronaut.kafka.avro.model.NaturalPerson.Builder(other);
    }
  }

  /**
   * RecordBuilder for NaturalPerson instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NaturalPerson>
    implements org.apache.avro.data.RecordBuilder<NaturalPerson> {

    /** type of person i.e. NaturalPerson or JuristicPerson */
    private java.lang.CharSequence type;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence secondName;
    private java.lang.CharSequence birthday;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(micronaut.kafka.avro.model.NaturalPerson.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.secondName)) {
        this.secondName = data().deepCopy(fields()[2].schema(), other.secondName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.birthday)) {
        this.birthday = data().deepCopy(fields()[3].schema(), other.birthday);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing NaturalPerson instance
     * @param other The existing instance to copy.
     */
    private Builder(micronaut.kafka.avro.model.NaturalPerson other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.secondName)) {
        this.secondName = data().deepCopy(fields()[2].schema(), other.secondName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.birthday)) {
        this.birthday = data().deepCopy(fields()[3].schema(), other.birthday);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * type of person i.e. NaturalPerson or JuristicPerson
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * type of person i.e. NaturalPerson or JuristicPerson
      * @param value The value of 'type'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.NaturalPerson.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * type of person i.e. NaturalPerson or JuristicPerson
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * type of person i.e. NaturalPerson or JuristicPerson
      * @return This builder.
      */
    public micronaut.kafka.avro.model.NaturalPerson.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.NaturalPerson.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.NaturalPerson.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'secondName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSecondName() {
      return secondName;
    }


    /**
      * Sets the value of the 'secondName' field.
      * @param value The value of 'secondName'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.NaturalPerson.Builder setSecondName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.secondName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'secondName' field has been set.
      * @return True if the 'secondName' field has been set, false otherwise.
      */
    public boolean hasSecondName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'secondName' field.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.NaturalPerson.Builder clearSecondName() {
      secondName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthday' field.
      * @return The value.
      */
    public java.lang.CharSequence getBirthday() {
      return birthday;
    }


    /**
      * Sets the value of the 'birthday' field.
      * @param value The value of 'birthday'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.NaturalPerson.Builder setBirthday(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.birthday = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'birthday' field has been set.
      * @return True if the 'birthday' field has been set, false otherwise.
      */
    public boolean hasBirthday() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'birthday' field.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.NaturalPerson.Builder clearBirthday() {
      birthday = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NaturalPerson build() {
      try {
        NaturalPerson record = new NaturalPerson();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.secondName = fieldSetFlags()[2] ? this.secondName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.birthday = fieldSetFlags()[3] ? this.birthday : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NaturalPerson>
    WRITER$ = (org.apache.avro.io.DatumWriter<NaturalPerson>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NaturalPerson>
    READER$ = (org.apache.avro.io.DatumReader<NaturalPerson>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.type);

    out.writeString(this.firstName);

    out.writeString(this.secondName);

    out.writeString(this.birthday);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);

      this.secondName = in.readString(this.secondName instanceof Utf8 ? (Utf8)this.secondName : null);

      this.birthday = in.readString(this.birthday instanceof Utf8 ? (Utf8)this.birthday : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 1:
          this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);
          break;

        case 2:
          this.secondName = in.readString(this.secondName instanceof Utf8 ? (Utf8)this.secondName : null);
          break;

        case 3:
          this.birthday = in.readString(this.birthday instanceof Utf8 ? (Utf8)this.birthday : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










