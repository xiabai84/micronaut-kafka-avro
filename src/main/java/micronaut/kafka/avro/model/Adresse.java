/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package micronaut.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Adresse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -612990078149897395L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Adresse\",\"namespace\":\"micronaut.kafka.avro.model\",\"doc\":\"\",\"fields\":[{\"name\":\"adresseId\",\"type\":\"string\",\"doc\":\"Adresse ID\"},{\"name\":\"strasse\",\"type\":[\"null\",\"string\"],\"doc\":\"\",\"default\":null},{\"name\":\"hausnummer\",\"type\":[\"null\",\"string\"],\"doc\":\"\",\"default\":null},{\"name\":\"ort\",\"type\":[\"null\",\"string\"],\"doc\":\"\",\"default\":null},{\"name\":\"land\",\"type\":[\"null\",\"string\"],\"doc\":\"Email des Partners\",\"default\":null},{\"name\":\"postleitzahl\",\"type\":[\"null\",\"string\"],\"doc\":\"Postleitzahl des Partners\",\"default\":null},{\"name\":\"hauptadresse\",\"type\":[\"null\",\"string\"],\"doc\":\"Ist die Hauptadresse des Partners\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Adresse> ENCODER =
      new BinaryMessageEncoder<Adresse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Adresse> DECODER =
      new BinaryMessageDecoder<Adresse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Adresse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Adresse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Adresse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Adresse>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Adresse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Adresse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Adresse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Adresse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Adresse ID */
   private java.lang.CharSequence adresseId;
   private java.lang.CharSequence strasse;
   private java.lang.CharSequence hausnummer;
   private java.lang.CharSequence ort;
  /** Email des Partners */
   private java.lang.CharSequence land;
  /** Postleitzahl des Partners */
   private java.lang.CharSequence postleitzahl;
  /** Ist die Hauptadresse des Partners */
   private java.lang.CharSequence hauptadresse;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Adresse() {}

  /**
   * All-args constructor.
   * @param adresseId Adresse ID
   * @param strasse The new value for strasse
   * @param hausnummer The new value for hausnummer
   * @param ort The new value for ort
   * @param land Email des Partners
   * @param postleitzahl Postleitzahl des Partners
   * @param hauptadresse Ist die Hauptadresse des Partners
   */
  public Adresse(java.lang.CharSequence adresseId, java.lang.CharSequence strasse, java.lang.CharSequence hausnummer, java.lang.CharSequence ort, java.lang.CharSequence land, java.lang.CharSequence postleitzahl, java.lang.CharSequence hauptadresse) {
    this.adresseId = adresseId;
    this.strasse = strasse;
    this.hausnummer = hausnummer;
    this.ort = ort;
    this.land = land;
    this.postleitzahl = postleitzahl;
    this.hauptadresse = hauptadresse;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return adresseId;
    case 1: return strasse;
    case 2: return hausnummer;
    case 3: return ort;
    case 4: return land;
    case 5: return postleitzahl;
    case 6: return hauptadresse;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: adresseId = (java.lang.CharSequence)value$; break;
    case 1: strasse = (java.lang.CharSequence)value$; break;
    case 2: hausnummer = (java.lang.CharSequence)value$; break;
    case 3: ort = (java.lang.CharSequence)value$; break;
    case 4: land = (java.lang.CharSequence)value$; break;
    case 5: postleitzahl = (java.lang.CharSequence)value$; break;
    case 6: hauptadresse = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'adresseId' field.
   * @return Adresse ID
   */
  public java.lang.CharSequence getAdresseId() {
    return adresseId;
  }


  /**
   * Sets the value of the 'adresseId' field.
   * Adresse ID
   * @param value the value to set.
   */
  public void setAdresseId(java.lang.CharSequence value) {
    this.adresseId = value;
  }

  /**
   * Gets the value of the 'strasse' field.
   * @return The value of the 'strasse' field.
   */
  public java.lang.CharSequence getStrasse() {
    return strasse;
  }


  /**
   * Sets the value of the 'strasse' field.
   * @param value the value to set.
   */
  public void setStrasse(java.lang.CharSequence value) {
    this.strasse = value;
  }

  /**
   * Gets the value of the 'hausnummer' field.
   * @return The value of the 'hausnummer' field.
   */
  public java.lang.CharSequence getHausnummer() {
    return hausnummer;
  }


  /**
   * Sets the value of the 'hausnummer' field.
   * @param value the value to set.
   */
  public void setHausnummer(java.lang.CharSequence value) {
    this.hausnummer = value;
  }

  /**
   * Gets the value of the 'ort' field.
   * @return The value of the 'ort' field.
   */
  public java.lang.CharSequence getOrt() {
    return ort;
  }


  /**
   * Sets the value of the 'ort' field.
   * @param value the value to set.
   */
  public void setOrt(java.lang.CharSequence value) {
    this.ort = value;
  }

  /**
   * Gets the value of the 'land' field.
   * @return Email des Partners
   */
  public java.lang.CharSequence getLand() {
    return land;
  }


  /**
   * Sets the value of the 'land' field.
   * Email des Partners
   * @param value the value to set.
   */
  public void setLand(java.lang.CharSequence value) {
    this.land = value;
  }

  /**
   * Gets the value of the 'postleitzahl' field.
   * @return Postleitzahl des Partners
   */
  public java.lang.CharSequence getPostleitzahl() {
    return postleitzahl;
  }


  /**
   * Sets the value of the 'postleitzahl' field.
   * Postleitzahl des Partners
   * @param value the value to set.
   */
  public void setPostleitzahl(java.lang.CharSequence value) {
    this.postleitzahl = value;
  }

  /**
   * Gets the value of the 'hauptadresse' field.
   * @return Ist die Hauptadresse des Partners
   */
  public java.lang.CharSequence getHauptadresse() {
    return hauptadresse;
  }


  /**
   * Sets the value of the 'hauptadresse' field.
   * Ist die Hauptadresse des Partners
   * @param value the value to set.
   */
  public void setHauptadresse(java.lang.CharSequence value) {
    this.hauptadresse = value;
  }

  /**
   * Creates a new Adresse RecordBuilder.
   * @return A new Adresse RecordBuilder
   */
  public static micronaut.kafka.avro.model.Adresse.Builder newBuilder() {
    return new micronaut.kafka.avro.model.Adresse.Builder();
  }

  /**
   * Creates a new Adresse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Adresse RecordBuilder
   */
  public static micronaut.kafka.avro.model.Adresse.Builder newBuilder(micronaut.kafka.avro.model.Adresse.Builder other) {
    if (other == null) {
      return new micronaut.kafka.avro.model.Adresse.Builder();
    } else {
      return new micronaut.kafka.avro.model.Adresse.Builder(other);
    }
  }

  /**
   * Creates a new Adresse RecordBuilder by copying an existing Adresse instance.
   * @param other The existing instance to copy.
   * @return A new Adresse RecordBuilder
   */
  public static micronaut.kafka.avro.model.Adresse.Builder newBuilder(micronaut.kafka.avro.model.Adresse other) {
    if (other == null) {
      return new micronaut.kafka.avro.model.Adresse.Builder();
    } else {
      return new micronaut.kafka.avro.model.Adresse.Builder(other);
    }
  }

  /**
   * RecordBuilder for Adresse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Adresse>
    implements org.apache.avro.data.RecordBuilder<Adresse> {

    /** Adresse ID */
    private java.lang.CharSequence adresseId;
    private java.lang.CharSequence strasse;
    private java.lang.CharSequence hausnummer;
    private java.lang.CharSequence ort;
    /** Email des Partners */
    private java.lang.CharSequence land;
    /** Postleitzahl des Partners */
    private java.lang.CharSequence postleitzahl;
    /** Ist die Hauptadresse des Partners */
    private java.lang.CharSequence hauptadresse;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(micronaut.kafka.avro.model.Adresse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.adresseId)) {
        this.adresseId = data().deepCopy(fields()[0].schema(), other.adresseId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.strasse)) {
        this.strasse = data().deepCopy(fields()[1].schema(), other.strasse);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.hausnummer)) {
        this.hausnummer = data().deepCopy(fields()[2].schema(), other.hausnummer);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ort)) {
        this.ort = data().deepCopy(fields()[3].schema(), other.ort);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.land)) {
        this.land = data().deepCopy(fields()[4].schema(), other.land);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.postleitzahl)) {
        this.postleitzahl = data().deepCopy(fields()[5].schema(), other.postleitzahl);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.hauptadresse)) {
        this.hauptadresse = data().deepCopy(fields()[6].schema(), other.hauptadresse);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Adresse instance
     * @param other The existing instance to copy.
     */
    private Builder(micronaut.kafka.avro.model.Adresse other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.adresseId)) {
        this.adresseId = data().deepCopy(fields()[0].schema(), other.adresseId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.strasse)) {
        this.strasse = data().deepCopy(fields()[1].schema(), other.strasse);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hausnummer)) {
        this.hausnummer = data().deepCopy(fields()[2].schema(), other.hausnummer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ort)) {
        this.ort = data().deepCopy(fields()[3].schema(), other.ort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.land)) {
        this.land = data().deepCopy(fields()[4].schema(), other.land);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.postleitzahl)) {
        this.postleitzahl = data().deepCopy(fields()[5].schema(), other.postleitzahl);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hauptadresse)) {
        this.hauptadresse = data().deepCopy(fields()[6].schema(), other.hauptadresse);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'adresseId' field.
      * Adresse ID
      * @return The value.
      */
    public java.lang.CharSequence getAdresseId() {
      return adresseId;
    }


    /**
      * Sets the value of the 'adresseId' field.
      * Adresse ID
      * @param value The value of 'adresseId'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder setAdresseId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.adresseId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'adresseId' field has been set.
      * Adresse ID
      * @return True if the 'adresseId' field has been set, false otherwise.
      */
    public boolean hasAdresseId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'adresseId' field.
      * Adresse ID
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder clearAdresseId() {
      adresseId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'strasse' field.
      * @return The value.
      */
    public java.lang.CharSequence getStrasse() {
      return strasse;
    }


    /**
      * Sets the value of the 'strasse' field.
      * @param value The value of 'strasse'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder setStrasse(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.strasse = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'strasse' field has been set.
      * @return True if the 'strasse' field has been set, false otherwise.
      */
    public boolean hasStrasse() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'strasse' field.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder clearStrasse() {
      strasse = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hausnummer' field.
      * @return The value.
      */
    public java.lang.CharSequence getHausnummer() {
      return hausnummer;
    }


    /**
      * Sets the value of the 'hausnummer' field.
      * @param value The value of 'hausnummer'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder setHausnummer(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.hausnummer = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hausnummer' field has been set.
      * @return True if the 'hausnummer' field has been set, false otherwise.
      */
    public boolean hasHausnummer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hausnummer' field.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder clearHausnummer() {
      hausnummer = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ort' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrt() {
      return ort;
    }


    /**
      * Sets the value of the 'ort' field.
      * @param value The value of 'ort'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder setOrt(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.ort = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ort' field has been set.
      * @return True if the 'ort' field has been set, false otherwise.
      */
    public boolean hasOrt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ort' field.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder clearOrt() {
      ort = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'land' field.
      * Email des Partners
      * @return The value.
      */
    public java.lang.CharSequence getLand() {
      return land;
    }


    /**
      * Sets the value of the 'land' field.
      * Email des Partners
      * @param value The value of 'land'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder setLand(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.land = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'land' field has been set.
      * Email des Partners
      * @return True if the 'land' field has been set, false otherwise.
      */
    public boolean hasLand() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'land' field.
      * Email des Partners
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder clearLand() {
      land = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'postleitzahl' field.
      * Postleitzahl des Partners
      * @return The value.
      */
    public java.lang.CharSequence getPostleitzahl() {
      return postleitzahl;
    }


    /**
      * Sets the value of the 'postleitzahl' field.
      * Postleitzahl des Partners
      * @param value The value of 'postleitzahl'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder setPostleitzahl(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.postleitzahl = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'postleitzahl' field has been set.
      * Postleitzahl des Partners
      * @return True if the 'postleitzahl' field has been set, false otherwise.
      */
    public boolean hasPostleitzahl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'postleitzahl' field.
      * Postleitzahl des Partners
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder clearPostleitzahl() {
      postleitzahl = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hauptadresse' field.
      * Ist die Hauptadresse des Partners
      * @return The value.
      */
    public java.lang.CharSequence getHauptadresse() {
      return hauptadresse;
    }


    /**
      * Sets the value of the 'hauptadresse' field.
      * Ist die Hauptadresse des Partners
      * @param value The value of 'hauptadresse'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder setHauptadresse(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.hauptadresse = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hauptadresse' field has been set.
      * Ist die Hauptadresse des Partners
      * @return True if the 'hauptadresse' field has been set, false otherwise.
      */
    public boolean hasHauptadresse() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hauptadresse' field.
      * Ist die Hauptadresse des Partners
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Adresse.Builder clearHauptadresse() {
      hauptadresse = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Adresse build() {
      try {
        Adresse record = new Adresse();
        record.adresseId = fieldSetFlags()[0] ? this.adresseId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.strasse = fieldSetFlags()[1] ? this.strasse : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.hausnummer = fieldSetFlags()[2] ? this.hausnummer : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.ort = fieldSetFlags()[3] ? this.ort : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.land = fieldSetFlags()[4] ? this.land : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.postleitzahl = fieldSetFlags()[5] ? this.postleitzahl : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.hauptadresse = fieldSetFlags()[6] ? this.hauptadresse : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Adresse>
    WRITER$ = (org.apache.avro.io.DatumWriter<Adresse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Adresse>
    READER$ = (org.apache.avro.io.DatumReader<Adresse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.adresseId);

    if (this.strasse == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.strasse);
    }

    if (this.hausnummer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.hausnummer);
    }

    if (this.ort == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ort);
    }

    if (this.land == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.land);
    }

    if (this.postleitzahl == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.postleitzahl);
    }

    if (this.hauptadresse == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.hauptadresse);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.adresseId = in.readString(this.adresseId instanceof Utf8 ? (Utf8)this.adresseId : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.strasse = null;
      } else {
        this.strasse = in.readString(this.strasse instanceof Utf8 ? (Utf8)this.strasse : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hausnummer = null;
      } else {
        this.hausnummer = in.readString(this.hausnummer instanceof Utf8 ? (Utf8)this.hausnummer : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ort = null;
      } else {
        this.ort = in.readString(this.ort instanceof Utf8 ? (Utf8)this.ort : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.land = null;
      } else {
        this.land = in.readString(this.land instanceof Utf8 ? (Utf8)this.land : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.postleitzahl = null;
      } else {
        this.postleitzahl = in.readString(this.postleitzahl instanceof Utf8 ? (Utf8)this.postleitzahl : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hauptadresse = null;
      } else {
        this.hauptadresse = in.readString(this.hauptadresse instanceof Utf8 ? (Utf8)this.hauptadresse : null);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.adresseId = in.readString(this.adresseId instanceof Utf8 ? (Utf8)this.adresseId : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.strasse = null;
          } else {
            this.strasse = in.readString(this.strasse instanceof Utf8 ? (Utf8)this.strasse : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hausnummer = null;
          } else {
            this.hausnummer = in.readString(this.hausnummer instanceof Utf8 ? (Utf8)this.hausnummer : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ort = null;
          } else {
            this.ort = in.readString(this.ort instanceof Utf8 ? (Utf8)this.ort : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.land = null;
          } else {
            this.land = in.readString(this.land instanceof Utf8 ? (Utf8)this.land : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.postleitzahl = null;
          } else {
            this.postleitzahl = in.readString(this.postleitzahl instanceof Utf8 ? (Utf8)this.postleitzahl : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hauptadresse = null;
          } else {
            this.hauptadresse = in.readString(this.hauptadresse instanceof Utf8 ? (Utf8)this.hauptadresse : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










