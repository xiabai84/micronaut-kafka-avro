/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package micronaut.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Partner extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4403793600325109763L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Partner\",\"namespace\":\"micronaut.kafka.avro.model\",\"fields\":[{\"name\":\"partnerId\",\"type\":\"string\",\"doc\":\"Customer ID\"},{\"name\":\"lastEventId\",\"type\":[\"null\",\"string\"],\"doc\":\"Latest event id\",\"default\":null},{\"name\":\"partnerInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PartnerInfo\",\"fields\":[{\"name\":\"partnerId\",\"type\":\"string\",\"doc\":\"Customer ID\"},{\"name\":\"email\",\"type\":\"string\",\"doc\":\"contact email address\"},{\"name\":\"telephone\",\"type\":\"string\",\"doc\":\"contact telephone number\"}],\"version\":\"1\"}],\"doc\":\"Basic information about a partner\",\"default\":null},{\"name\":\"specInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"NaturalPerson\",\"doc\":\"Partner is Kunden von VKB, kann sowohl juristische Person als auch natuerliche Person sein\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"doc\":\"type of person i.e. NaturalPerson or JuristicPerson\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"secondName\",\"type\":\"string\"},{\"name\":\"birthday\",\"type\":\"string\"}],\"version\":\"1\"},{\"type\":\"record\",\"name\":\"JuristicPerson\",\"doc\":\"Partner such as company or organisation\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"doc\":\"type of person i.e. NaturalPerson or JuristicPerson\"},{\"name\":\"name\",\"type\":\"string\"}],\"version\":\"1\"}],\"doc\":\"Polymorphic type of a partner object\",\"default\":null}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Partner> ENCODER =
      new BinaryMessageEncoder<Partner>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Partner> DECODER =
      new BinaryMessageDecoder<Partner>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Partner> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Partner> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Partner> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Partner>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Partner to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Partner from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Partner instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Partner fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Customer ID */
   private java.lang.CharSequence partnerId;
  /** Latest event id */
   private java.lang.CharSequence lastEventId;
  /** Basic information about a partner */
   private micronaut.kafka.avro.model.PartnerInfo partnerInfo;
  /** Polymorphic type of a partner object */
   private java.lang.Object specInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Partner() {}

  /**
   * All-args constructor.
   * @param partnerId Customer ID
   * @param lastEventId Latest event id
   * @param partnerInfo Basic information about a partner
   * @param specInfo Polymorphic type of a partner object
   */
  public Partner(java.lang.CharSequence partnerId, java.lang.CharSequence lastEventId, micronaut.kafka.avro.model.PartnerInfo partnerInfo, java.lang.Object specInfo) {
    this.partnerId = partnerId;
    this.lastEventId = lastEventId;
    this.partnerInfo = partnerInfo;
    this.specInfo = specInfo;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return partnerId;
    case 1: return lastEventId;
    case 2: return partnerInfo;
    case 3: return specInfo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: partnerId = (java.lang.CharSequence)value$; break;
    case 1: lastEventId = (java.lang.CharSequence)value$; break;
    case 2: partnerInfo = (micronaut.kafka.avro.model.PartnerInfo)value$; break;
    case 3: specInfo = value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'partnerId' field.
   * @return Customer ID
   */
  public java.lang.CharSequence getPartnerId() {
    return partnerId;
  }


  /**
   * Sets the value of the 'partnerId' field.
   * Customer ID
   * @param value the value to set.
   */
  public void setPartnerId(java.lang.CharSequence value) {
    this.partnerId = value;
  }

  /**
   * Gets the value of the 'lastEventId' field.
   * @return Latest event id
   */
  public java.lang.CharSequence getLastEventId() {
    return lastEventId;
  }


  /**
   * Sets the value of the 'lastEventId' field.
   * Latest event id
   * @param value the value to set.
   */
  public void setLastEventId(java.lang.CharSequence value) {
    this.lastEventId = value;
  }

  /**
   * Gets the value of the 'partnerInfo' field.
   * @return Basic information about a partner
   */
  public micronaut.kafka.avro.model.PartnerInfo getPartnerInfo() {
    return partnerInfo;
  }


  /**
   * Sets the value of the 'partnerInfo' field.
   * Basic information about a partner
   * @param value the value to set.
   */
  public void setPartnerInfo(micronaut.kafka.avro.model.PartnerInfo value) {
    this.partnerInfo = value;
  }

  /**
   * Gets the value of the 'specInfo' field.
   * @return Polymorphic type of a partner object
   */
  public java.lang.Object getSpecInfo() {
    return specInfo;
  }


  /**
   * Sets the value of the 'specInfo' field.
   * Polymorphic type of a partner object
   * @param value the value to set.
   */
  public void setSpecInfo(java.lang.Object value) {
    this.specInfo = value;
  }

  /**
   * Creates a new Partner RecordBuilder.
   * @return A new Partner RecordBuilder
   */
  public static micronaut.kafka.avro.model.Partner.Builder newBuilder() {
    return new micronaut.kafka.avro.model.Partner.Builder();
  }

  /**
   * Creates a new Partner RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Partner RecordBuilder
   */
  public static micronaut.kafka.avro.model.Partner.Builder newBuilder(micronaut.kafka.avro.model.Partner.Builder other) {
    if (other == null) {
      return new micronaut.kafka.avro.model.Partner.Builder();
    } else {
      return new micronaut.kafka.avro.model.Partner.Builder(other);
    }
  }

  /**
   * Creates a new Partner RecordBuilder by copying an existing Partner instance.
   * @param other The existing instance to copy.
   * @return A new Partner RecordBuilder
   */
  public static micronaut.kafka.avro.model.Partner.Builder newBuilder(micronaut.kafka.avro.model.Partner other) {
    if (other == null) {
      return new micronaut.kafka.avro.model.Partner.Builder();
    } else {
      return new micronaut.kafka.avro.model.Partner.Builder(other);
    }
  }

  /**
   * RecordBuilder for Partner instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Partner>
    implements org.apache.avro.data.RecordBuilder<Partner> {

    /** Customer ID */
    private java.lang.CharSequence partnerId;
    /** Latest event id */
    private java.lang.CharSequence lastEventId;
    /** Basic information about a partner */
    private micronaut.kafka.avro.model.PartnerInfo partnerInfo;
    private micronaut.kafka.avro.model.PartnerInfo.Builder partnerInfoBuilder;
    /** Polymorphic type of a partner object */
    private java.lang.Object specInfo;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(micronaut.kafka.avro.model.Partner.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.partnerId)) {
        this.partnerId = data().deepCopy(fields()[0].schema(), other.partnerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lastEventId)) {
        this.lastEventId = data().deepCopy(fields()[1].schema(), other.lastEventId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.partnerInfo)) {
        this.partnerInfo = data().deepCopy(fields()[2].schema(), other.partnerInfo);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPartnerInfoBuilder()) {
        this.partnerInfoBuilder = micronaut.kafka.avro.model.PartnerInfo.newBuilder(other.getPartnerInfoBuilder());
      }
      if (isValidValue(fields()[3], other.specInfo)) {
        this.specInfo = data().deepCopy(fields()[3].schema(), other.specInfo);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Partner instance
     * @param other The existing instance to copy.
     */
    private Builder(micronaut.kafka.avro.model.Partner other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.partnerId)) {
        this.partnerId = data().deepCopy(fields()[0].schema(), other.partnerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastEventId)) {
        this.lastEventId = data().deepCopy(fields()[1].schema(), other.lastEventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.partnerInfo)) {
        this.partnerInfo = data().deepCopy(fields()[2].schema(), other.partnerInfo);
        fieldSetFlags()[2] = true;
      }
      this.partnerInfoBuilder = null;
      if (isValidValue(fields()[3], other.specInfo)) {
        this.specInfo = data().deepCopy(fields()[3].schema(), other.specInfo);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'partnerId' field.
      * Customer ID
      * @return The value.
      */
    public java.lang.CharSequence getPartnerId() {
      return partnerId;
    }


    /**
      * Sets the value of the 'partnerId' field.
      * Customer ID
      * @param value The value of 'partnerId'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Partner.Builder setPartnerId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.partnerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'partnerId' field has been set.
      * Customer ID
      * @return True if the 'partnerId' field has been set, false otherwise.
      */
    public boolean hasPartnerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'partnerId' field.
      * Customer ID
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Partner.Builder clearPartnerId() {
      partnerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastEventId' field.
      * Latest event id
      * @return The value.
      */
    public java.lang.CharSequence getLastEventId() {
      return lastEventId;
    }


    /**
      * Sets the value of the 'lastEventId' field.
      * Latest event id
      * @param value The value of 'lastEventId'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Partner.Builder setLastEventId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.lastEventId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastEventId' field has been set.
      * Latest event id
      * @return True if the 'lastEventId' field has been set, false otherwise.
      */
    public boolean hasLastEventId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastEventId' field.
      * Latest event id
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Partner.Builder clearLastEventId() {
      lastEventId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'partnerInfo' field.
      * Basic information about a partner
      * @return The value.
      */
    public micronaut.kafka.avro.model.PartnerInfo getPartnerInfo() {
      return partnerInfo;
    }


    /**
      * Sets the value of the 'partnerInfo' field.
      * Basic information about a partner
      * @param value The value of 'partnerInfo'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Partner.Builder setPartnerInfo(micronaut.kafka.avro.model.PartnerInfo value) {
      validate(fields()[2], value);
      this.partnerInfoBuilder = null;
      this.partnerInfo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'partnerInfo' field has been set.
      * Basic information about a partner
      * @return True if the 'partnerInfo' field has been set, false otherwise.
      */
    public boolean hasPartnerInfo() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'partnerInfo' field and creates one if it doesn't exist yet.
     * Basic information about a partner
     * @return This builder.
     */
    public micronaut.kafka.avro.model.PartnerInfo.Builder getPartnerInfoBuilder() {
      if (partnerInfoBuilder == null) {
        if (hasPartnerInfo()) {
          setPartnerInfoBuilder(micronaut.kafka.avro.model.PartnerInfo.newBuilder(partnerInfo));
        } else {
          setPartnerInfoBuilder(micronaut.kafka.avro.model.PartnerInfo.newBuilder());
        }
      }
      return partnerInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'partnerInfo' field
     * Basic information about a partner
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public micronaut.kafka.avro.model.Partner.Builder setPartnerInfoBuilder(micronaut.kafka.avro.model.PartnerInfo.Builder value) {
      clearPartnerInfo();
      partnerInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'partnerInfo' field has an active Builder instance
     * Basic information about a partner
     * @return True if the 'partnerInfo' field has an active Builder instance
     */
    public boolean hasPartnerInfoBuilder() {
      return partnerInfoBuilder != null;
    }

    /**
      * Clears the value of the 'partnerInfo' field.
      * Basic information about a partner
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Partner.Builder clearPartnerInfo() {
      partnerInfo = null;
      partnerInfoBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'specInfo' field.
      * Polymorphic type of a partner object
      * @return The value.
      */
    public java.lang.Object getSpecInfo() {
      return specInfo;
    }


    /**
      * Sets the value of the 'specInfo' field.
      * Polymorphic type of a partner object
      * @param value The value of 'specInfo'.
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Partner.Builder setSpecInfo(java.lang.Object value) {
      validate(fields()[3], value);
      this.specInfo = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'specInfo' field has been set.
      * Polymorphic type of a partner object
      * @return True if the 'specInfo' field has been set, false otherwise.
      */
    public boolean hasSpecInfo() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'specInfo' field.
      * Polymorphic type of a partner object
      * @return This builder.
      */
    public micronaut.kafka.avro.model.Partner.Builder clearSpecInfo() {
      specInfo = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Partner build() {
      try {
        Partner record = new Partner();
        record.partnerId = fieldSetFlags()[0] ? this.partnerId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lastEventId = fieldSetFlags()[1] ? this.lastEventId : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (partnerInfoBuilder != null) {
          try {
            record.partnerInfo = this.partnerInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("partnerInfo"));
            throw e;
          }
        } else {
          record.partnerInfo = fieldSetFlags()[2] ? this.partnerInfo : (micronaut.kafka.avro.model.PartnerInfo) defaultValue(fields()[2]);
        }
        record.specInfo = fieldSetFlags()[3] ? this.specInfo :  defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Partner>
    WRITER$ = (org.apache.avro.io.DatumWriter<Partner>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Partner>
    READER$ = (org.apache.avro.io.DatumReader<Partner>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










