plugins {
    id "org.jetbrains.kotlin.jvm" version "1.6.21"
    id "org.jetbrains.kotlin.kapt" version "1.6.21"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.6.21"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.micronaut.application" version '1.0.3'
}

version "0.1"
group "micronaut.kafka.avro"

repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
    maven { url "https://jcenter.bintray.com" }
    maven { url 'https://packages.confluent.io/maven/' }
}

configurations {
    developmentOnly
}

dependencies {
    implementation "javax.annotation:javax.annotation-api"
    implementation("io.confluent:kafka-json-serializer:$confluentVersion")
    implementation("io.confluent:kafka-streams-json-schema-serde:$confluentVersion")
    implementation("io.confluent:kafka-json-schema-serializer:$confluentVersion")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.graphql:micronaut-graphql")
    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation("io.micronaut.kafka:micronaut-kafka-streams")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("io.micronaut:micronaut-management")
    testImplementation("org.apache.kafka:kafka-streams-test-utils:2.5.0")
    testImplementation "org.assertj:assertj-core:3.14.0"
    testImplementation "io.mockk:mockk:1.9.3"
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
test.classpath += configurations.developmentOnly
mainClassName = "micronaut.kafka.avro.Application"

micronaut {
    runtime "netty"
    testRuntime "junit5"
    processing {
        incremental true
        annotations "micronaut.kafka.avro.*"
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

